---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to Deploy API Gateway with Lambda Proxy Backend
Parameters:
  ManagedPolicyArns:
    Description: 'List of IAM Managed Policy ARNs to attach to Lambda Execution IAM Role'
    Type: CommaDelimitedList
    Default: ''
  InlinePolicyDocumentActionList:
    Description: 'List of Actions, to add to Inline Policy document for Lambda Execution IAM Role'
    Type: CommaDelimitedList
    Default: ''
  InlinePolicyDocumentResourceList:
    Description: 'List of Resources, to add to Inline Policy document for Lambda Execution IAM Role'
    Type: CommaDelimitedList
    Default: ''  
  LambdaRuntimeEnvironment:
    Description: 'Lambda Runtime Environment'
    Type: String
    Default: 'python3.7'
    AllowedValues: ['python3.6', 'python3.7', 'java8']
  LambdaHandlerReference:
    Description: 'The name of the method within your code that Lambda calls to execute your function'
    Type: String
    Default: 'index.lambda_handler'
  ApiGatewayEndpointConfiguration:
    Description: 'Rest API Endpoint Type'
    Type: String
    Default: 'REGIONAL'
    AllowedValues: ['REGIONAL', 'EDGE']
  ApiGatewayResourcePathPart:
    Description: 'Path name for the API Gateway resource'
    Type: String
  ApiGatewayStageName:
    Description: 'API Stage Name, this is used by API Gateway as first path segment in the invoked URI'
    Type: String
Conditions:
  HasManagedPolicyArns: !Not [ !Equals [ !Join ['-', !Ref ManagedPolicyArns], ''] ]
  HasInlinePolicyDocument:
    !And
    - !Not [ !Equals [ !Join ['-', !Ref InlinePolicyDocumentActionList], ''] ]
    - !Not [ !Equals [ !Join ['-', !Ref InlinePolicyDocumentResourceList], ''] ]
Rules:
  LambdaExecutionRolePolicyInputValidation1:
    RuleCondition: !Contains [ !Ref ManagedPolicyArns, '']
    Assertions:
      - Assert:
          !And
            - !Not [ !Contains [ !Ref InlinePolicyDocumentActionList, ''] ]
            - !Not [ !Contains [ !Ref InlinePolicyDocumentResourceList, ''] ]
        AssertDescriptions: 'You must provide ManagedPolicyArns or InlinePolicyDocument for Lambda Execution IAM Role'
Resources:
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      ManagedPolicyArns: !If [ HasManagedPolicyArns, !Ref ManagedPolicyArns, !Ref 'AWS::NoValue']
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: !If
        - HasInlinePolicyDocument
        - - PolicyName: !Sub '${AWS::StackName}-LambdaExecutionRoleInlinePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action: !Ref InlinePolicyDocumentActionList
                  Resource: !Ref InlinePolicyDocumentResourceList
        - !Ref 'AWS::NoValue'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
      Role: !GetAtt [IamRole, Arn]
      Runtime: !Ref LambdaRuntimeEnvironment
      Handler: !Ref LambdaHandlerReference
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            message = 'Hello World!'
            return message
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-RestApi'
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - !Ref ApiGatewayEndpointConfiguration
  LambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join ['', ['arn:aws:execute-api:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ApiGatewayRestApi, '/*' ] ]      
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt [ApiGatewayRestApi, RootResourceId]
      PathPart: !Ref ApiGatewayResourcePathPart	  
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri:
          !Join
            - ''
            - - 'arn:aws:apigateway:'
              - !Sub '${AWS::Region}'
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt [LambdaFunction, Arn]
              - '/invocations'
        IntegrationResponses:
        - StatusCode: 200
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
      - StatusCode: 200
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi	  
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          ResourcePath: '/*'
      StageName: !Ref ApiGatewayStageName
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref ApiGatewayDeployment
Outputs:
  LambdaExecutionRoleId:
    Description: 'ID of IAM Role'
    Value: !GetAtt [IamRole, RoleId]
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleId'
  LambdaExecutionRoleArn:
    Description: 'ARN of IAM Role'
    Value: !GetAtt [IamRole, Arn]
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'
  LambdaFunctionArn:
    Description: 'ARN of Lambda Function'
    Value: !GetAtt [LambdaFunction, Arn]
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'    
  ApiUrl:
    Description: Hello World API URL
    Value:
      !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - !Ref AWS::Region
          - '.amazonaws.com'
          - '/'
          - !Ref ApiGatewayStageName
          - '/'
          - !Ref ApiGatewayResourcePathPart
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'